{"version":3,"file":"notif.min.js","sources":["../src/notif.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manager for the coursefeedback blocks rankingpage (ranking.php).\n *\n * @module      block_coursefeedback\n * @copyright  2023 innoCampus, Technische UniversitÃ¤t Berlin\n * @author     2011-2023 onwards Jan Eberhardt\n * @author     2022 onwards Felix Di Lenarda\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport * as Str from 'core/str';\n\n// Initiate the needed  global vars.\nconst CFB_QUESTIONTYPE_SCHOOLGRADE = 1;\nconst CFB_QUESTIONTYPE_ESSAY = 2;\nlet sendingActive = false;\n\n/**\n * FadeOut element\n * @param {Object} element\n * @returns {Promise}\n */\nfunction fadeOut(element) {\n    return new Promise((resolve) => {\n        let opacity = parseFloat(window.getComputedStyle(element).getPropertyValue(\"opacity\"));\n        // Fallback if opacity isn't computed properly.\n        if (isNaN(opacity)) {\n            opacity = 0;\n        }\n        let fadingOut = setInterval(function() {\n            if (opacity <= 0) {\n                clearInterval(fadingOut);\n                resolve();\n            } else {\n                opacity = opacity - 0.1;\n                element.style.opacity = opacity;\n            }\n        }, 50);\n    });\n}\n\n/**\n * FadeIn element\n *\n * @param {Object} element\n */\nfunction fadeIn(element) {\n    let opacity = parseFloat(window.getComputedStyle(element).getPropertyValue(\"opacity\"));\n    // Fallback if opacity isn't computed properly.\n    if (isNaN(opacity)) {\n        opacity = 0;\n    }\n    let fadingIn = setInterval(function() {\n        if (opacity >= 1) {\n            clearInterval(fadingIn);\n        } else {\n            opacity = opacity + 0.1;\n            element.style.opacity = opacity;\n        }\n    }, 50);\n}\n\n/**\n * Send and receive feedback after answer was given\n *\n * @param {number} feedback (given schoolgrade answer)\n * @param {text} essay (given essay answer)\n * @param {object} cfbParams all needed parameters:\n *      courseId: cid,\n *      feedbackId: fbid,\n *      questionId: quid,\n *      questionType: qutype,\n *      questionSum: qusum\n * @param {object} domElements all needed domElements:\n *      schoolgradesContainer: Container of the schoolgrade answer elements\n *      essayContainer: Container of the essay answer elemnts\n *      textarea: Textarea element of the essay answer\n * */\nconst sendAndReceiveFeedback = (feedback, essay, cfbParams, domElements) => {\n    // Prevent doubleclicking for the same question.\n    if (sendingActive == true) {\n        return;\n    } else {\n        sendingActive = true;\n    }\n\n    // Get needed elements/nodes.\n    let feedbackNotif = domElements.notifikations.getElementsByClassName(\"cfb-notification-container\")[0];\n    let questionInfo = domElements.notifikations.getElementsByClassName(\"cfb-question-info\")[0];\n    let question = domElements.notifikations.getElementsByClassName(\"cfb-question\")[0];\n    let notif = feedbackNotif.parentElement;\n\n    // Fading out notification after clicking an emoji.\n    let foPromise = fadeOut(notif);\n\n    // Submit given FB to the server and receive new question if any left.\n    let promises = Ajax.call([{\n        methodname: 'block_coursefeedback_answer_question_and_get_new',\n        args: {\n            courseid: cfbParams.courseId,\n            feedback: feedback,\n            essay: essay,\n            feedbackid: cfbParams.feedbackId,\n            questionid: cfbParams.questionId,\n        }\n    }]);\n    promises[0].done(function (data) {\n        // Put new notification content and fade in after fadingout-promise resolved.\n        foPromise.then(() => {\n            if (data.nextquestion === null) {\n                // All questions were answered (no following question).\n                let thanksString = Str.get_string('notif_thankyou', 'block_coursefeedback');\n                thanksString.done(function (string) {\n                    feedbackNotif.innerHTML = string;\n                    fadeIn(notif);\n                });\n            } else {\n                // A following question was returned.\n                cfbParams.questionId = data.nextquestionid;\n                // Delete textarea value.\n                domElements.textarea.value = '';\n                // Check if we need to swap questiontypes.\n                let nextQuestionType = data.nextquestiontype;\n                // Choose which questiontype needs to be visible.\n                if (nextQuestionType === CFB_QUESTIONTYPE_SCHOOLGRADE) {\n                    domElements.essayContainer.classList.add('d-none');\n                    domElements.schoolgradesContainer.classList.remove('d-none');\n                } else if (nextQuestionType === CFB_QUESTIONTYPE_ESSAY) {\n                    domElements.schoolgradesContainer.classList.add('d-none');\n                    domElements.essayContainer.classList.remove('d-none');\n                }\n                // Update current questiontype.\n                cfbParams.questionType = nextQuestionType;\n\n                // Update questionInfo and question and show.\n                let qStr = Str.get_string('notif_question', 'block_coursefeedback');\n                qStr.done(function(string) {\n                    questionInfo.innerHTML = string.concat(cfbParams.questionId).concat('/')\n                        .concat(cfbParams.questionSum).concat(': ');\n                    question.innerHTML = data.nextquestion;\n                    sendingActive = false;\n                    fadeIn(notif);\n                });\n            }\n        });\n    }).fail(function(ex) {\n        window.console.error(ex);\n    });\n};\n\n/**\n * Initialise by activatin the emoji click listeners\n *\n * @param {number} cid courseId\n * @param {number} fbid feedbackId\n * @param {number} quid questionId\n * @param {number} qutype questionType\n * @param {number} qusum how many question in total in this FB\n */\nexport const initialise = (cid, fbid, quid, qutype, qusum) => {\n    // Create CFB param object.\n    const cfbParams = {\n        courseId: cid,\n        feedbackId: fbid,\n        questionId: quid,\n        questionType: qutype,\n        questionSum: qusum\n    };\n\n    // Initiallize DOM-elements object\n    let notifikations = document.getElementById(\"user-notifications\");\n    let div = document.getElementsByClassName('cfb-essaytextarea')[0];\n    let textarea = document.createElement('textarea');\n    textarea.classList.add('w-100', 'rounded');\n    textarea.id = 'cfb-essay-textarea';\n    div.appendChild(textarea);\n    const domElements = {\n        notifikations: notifikations,\n        textarea: textarea,\n        schoolgradesContainer: notifikations.getElementsByClassName(\"cfb-schoolgrades-container\")[0],\n        essayContainer: notifikations.getElementsByClassName(\"cfb-essay-container\")[0]\n    };\n\n    let feedbackNotif = domElements.notifikations.getElementsByClassName(\"cfb-notification-container\")[0];\n\n    // To prevent the destruction of our click events from bootsrap.\n    // We need to remove the 'role' attribute from this notification.\n    feedbackNotif.parentElement.removeAttribute(\"role\");\n\n    // Add click listener to our fbemoji-buttons for potential schoolgrade type questions.\n    const emojis = [...domElements.notifikations.getElementsByClassName(\"cfb-fbemoji\")];\n    emojis.map((emoji) => {\n        let answer = emojis.indexOf(emoji) + 1;\n        emoji.onclick = () => {\n            sendAndReceiveFeedback(answer, null, cfbParams, domElements);\n        };\n    });\n\n    // Add click listener to our essaysendbtn-button for potential essay type questions.\n    let sendButton = document.getElementsByClassName('cfb-essaysendbtn')[0];\n    sendButton.onclick = () => {\n        let essayanswer = domElements.textarea.value;\n        sendAndReceiveFeedback(null, essayanswer, cfbParams, domElements);\n    };\n\n    // Bootstrap 4 does not have opacity classes, inline styles are filtered out for some reason.\n    // Therefore we use invisible class and then switch to opacity to fade in.\n    let overlayIcon = domElements.notifikations.getElementsByClassName(\"cfb-overlay-icon\")[0];\n\n    // Choose which questiontype needs to be visible.\n    let buttonContainer;\n    if (cfbParams.questionType == CFB_QUESTIONTYPE_SCHOOLGRADE) {\n        buttonContainer = domElements.schoolgradesContainer;\n        buttonContainer.style.opacity = 0;\n        buttonContainer.classList.remove('d-none');\n    } else if (cfbParams.questionType == CFB_QUESTIONTYPE_ESSAY) {\n        buttonContainer = domElements.essayContainer;\n        buttonContainer.style.opacity = 0;\n        buttonContainer.classList.remove('d-none');\n    }\n\n    // Remove overlay container, it was breaking the link and is not needed anymore.\n    let element = document.querySelector('.cfb-overlay-icon');\n    if (element) {\n        element.remove();\n    }\n\n    // Fade out the loadingspinner and fade in the fbemoji-buttons.\n    let foPromise = fadeOut(overlayIcon);\n    foPromise.then(() => {\n        fadeIn(buttonContainer);\n    });\n};\n\n"],"names":["sendingActive","fadeOut","element","Promise","resolve","opacity","parseFloat","window","getComputedStyle","getPropertyValue","isNaN","fadingOut","setInterval","clearInterval","style","fadeIn","fadingIn","sendAndReceiveFeedback","feedback","essay","cfbParams","domElements","feedbackNotif","notifikations","getElementsByClassName","questionInfo","question","notif","parentElement","foPromise","Ajax","call","methodname","args","courseid","courseId","feedbackid","feedbackId","questionid","questionId","done","data","then","nextquestion","Str","get_string","string","innerHTML","nextquestionid","textarea","value","nextQuestionType","nextquestiontype","essayContainer","classList","add","schoolgradesContainer","remove","questionType","concat","questionSum","fail","ex","console","error","cid","fbid","quid","qutype","qusum","document","getElementById","div","createElement","id","appendChild","removeAttribute","emojis","map","emoji","answer","indexOf","onclick","essayanswer","buttonContainer","overlayIcon","querySelector"],"mappings":"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"}